KB = 1024
MB = 1024**2
GB = 1024**3
TB = 1024**4
SECOND = 1
MINUTE = 60
HOUR = 60 * 60
DAY = 24 * 60 * 60
"""
filter_config模板：
FILTER_CONFIG_TEMPLATE = {
    # 过滤器名称
    "name": "redfilter",
    # 存储被ban用户列表的文件，不ban填None，手动编辑此文件时请一行一个用户名
    # 每次来新种子的时候会重新读取这个文件，autoban.py和filter.py可以分别独立运行
    "banlist" : "/home7/fishpear/rss/ban_red.txt",
    # 允许的媒体类型，必须是set类型，无限制填None
    "media" : set(["CD", "Vinyl", "WEB"]),
    # 允许的格式，必须是set类型，无限制填None
    "format": set(["FLAC", "WAV"]),
    # 体积范围，单位Byte，如果不限制填None，样例：100MB-1024MB
    "sizelim": (100 * 1024**2, 1024 * 1024**2),
}
"""

"""
autoban模板：
AUTOBAN_TEMPLATE = {
    # 按ratio ban人的条件
    "ratio" : [
        # 以下3个条件表示当某个人发种个数超过count的时候，你的总ratio低于ratiolim则ban掉他
        # 样例：ratio低于0.2，或发了至少2个种且ratio低于0.4，或发了4至少4个种且ratio低于0.55，则ban掉他
        {"count":1, "ratiolim":0.2},
        {"count":2, "ratiolim":0.4},
        {"count":4, "ratiolim":0.55},
    ],
    # 统计ratio时忽略满足以下条件的种子：完成度低于min_progress，或已经发布时间超过max_time_added
    "ignore": {
        # 样例：只统计至少完成了30%，且时间不超过36小时的种子。
        "min_progress" : 0.3,
        "max_time_added" : 36 * HOUR,
    },
}
"""

"""
种子过滤功能`filter.py`与配置填写相关的逻辑简述：
太长不看：从source_dir读取种子，满足要求的转存到dest_dir里
1. 从文件夹CONFIG["filter"]["source_dir"]里读取种子文件，读取完成后删除原种子
2. 判断种子属于哪个tracker，目前支持red和dic
3. 根据对应tracker设定的过滤条件CONFIG["red"/"dic"/"ops"]["filter_config"]把满足条件的种子保存到CONFIG["filter"]["dest_dir"]里，不满足条件的会被忽略。
   对于不支持的tracker根据CONFIG["filter"]["default_behavior"]的设定进行保存或忽略。
   文件CONFIG["red"/"dic"/"ops"]["filter_config"]["banlist"]在过滤时实时读取，因此修改此文件之后不需要重新运行`filter.py`
4. 如果种子符合CONFIG["red"/"dic"/"ops"]["token_thresh"]的体积条件的话，则会使用token
"""

# 所有填写的文件夹和文件请预先创建好，本程序不会自动创建它们，所有信息没有另外说的都是必填
CONFIG = {
    # log文件输出路径，本程序所有输出都会保存一份在这个log里
    "log_file": "./filter.log",
    # filter的通用设置
    "filter" : {
        # 从这个文件夹里读取.torrent，此文件夹应为irssi等工具的保存种子的文件夹
        "source_dir" : "./tocheck",
        # 满足filter条件的种子会被转存到这个文件夹，此文件夹应为bt客户端的监控文件夹
        "dest_dir"   : "./watch",
        # 对于未配置信息的r到的种子的行为，默认是接受（即认为是满足条件），如果不要接受请改成"reject"
        "default_behavior" : "accept",
    }, 
    # dic 配置信息，如果不需要刷dic请将分割线1内整段注释掉
    # ========================分割线1=============================
    "dic":{
        # 一个文件夹，保存曾经请求过的api回复，如果不需要可以填None
        "api_cache_dir" : "~/.cache/fishrss/dic",
        # 关于cookie的填写请参考`README.rss.md`里的描述
        "cookies"       : {
            "PHPSESSID" : "xxxxxxxxxxxxxxxxxxxxxxxx",
            "session"   : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        },
        # authkey和torrent_pass请随便复制一个种子的下载链接，里面有
        "authkey"       : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "torrent_pass"  : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        # filter_config的填写请参考上面的模板FILTER_CONFIG_TEMPLATE和给出的样例
        "filter_config" : {
            "name"    : "dicfilter",
            "banlist" : None,
            "media"   : None,
            "format"  : set(["FLAC"]),
            "sizelim" : None,
        },
        # 体积在这个区间内时自动使用令牌，样例：100MB-2GB，如果不想使用令牌请填一个非法的区间，比如(0,-1)
        # 注意，即使令牌用完，本脚本依然会继续下载种子，此时等于下黑种，请关注令牌余量
        "token_thresh": (100 * MB, 2 * GB),
        # 自动ban人脚本条件，如果需要使用该脚本，请取消以下的注释：
        # 填写时，请参考上面的模板AUTOBAN_TEMPLATE和给出的样例
        # "autoban" : {
        #     "ratio" : [
        #         {"count":1, "ratiolim":0.2},
        #     ],        
        #     "ignore": {
        #         "min_progress" : 0.3,
        #         "max_time_added" : 36 * HOUR,
        #     },
        # },
    },
    # ========================分割线1=============================
    # red 配置信息，如果不需要刷red请将分割线2内整段注释掉（默认是注释掉的）
    # ========================分割线2=============================
    # "red" : {
    #     # 一个文件夹，保存曾经请求过的api回复，如果不需要自动拉黑脚本可以填None
    #     "api_cache_dir" : "~/.cache/fishrss/red",
    #     # cookie/apikey二选一用于鉴权，推荐使用api_key，因为可以缩小一半的api请求间隔限制（10秒5次->10秒10次）
    #     # 如果非要使用cookie的话，请将cookie取消注释，并将api_key填为None
    #     # 关于cookie的填写请参考`README.rss.md`里的描述
    #     # "cookies"       : {
    #     #     "session": "xxxxxxxxxxxx"
    #     # },
    #     # apikey请在red个人设置页面进行设置，记得勾选"Confirm API Key"并保存之后apikey才生效
    #     "api_key"       : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    #     # authkey和torrent_pass请随便复制一个种子的下载链接，里面有
    #     "authkey"       : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    #     "torrent_pass"  : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    #     # filter_config的填写请参考上面的模板FILTER_CONFIG_TEMPLATE和给出的样例
    #     "filter_config" : {
    #         "name"    : "redfilter",
    #         "banlist" : None,
    #         "media"   : set(["CD"]),
    #         "format"  : None,
    #         "sizelim" : (100 * MB, 1024 * MB)
    #     },
    #     # 体积在这个区间内时自动使用token，样例：800MB-2GB，如果不想使用token请填一个非法的区间，比如(0,-1)
    #     # 注意1：red的token使用规则不支持大于2GB的种子，体积上限不要设超过2GB
    #     # 注意2：即使token用完，本脚本依然会继续下载种子，此时等于下黑种，请关注token余量
    #     "token_thresh": (800 * MB, 2 * GB),
    #     # 自动ban人脚本条件，如果需要使用该脚本，请取消以下的注释：
    #     # 填写时，请参考上面的模板AUTOBAN_TEMPLATE和给出的样例
    #     # "autoban" : {
    #     #     "ratio" : [
    #     #         {"count":1, "ratiolim":0.2},
    #     #     ],        
    #     #     "ignore": {
    #     #         "min_progress" : 0.3,
    #     #         "max_time_added" : 36 * HOUR,
    #     #     },
    #     # },
    # },
    # ========================分割线2=============================
    # ops 配置信息，如果不需要刷ops请将分割线3内整段注释掉（默认是注释掉的）
    # ========================分割线3=============================
    # "ops":{
    #     # 保存曾经请求过的api回复，如果不需要可以填None
    #     "api_cache_dir" : "~/.cache/fishrss/ops",
    #     # cookie/apikey二选一用于鉴权
    #     # 如果使用cookie的话，请将cookie取消注释，并将api_key填为None
    #     # 关于cookie的填写请参考`README.rss.md`里的描述
    #     # "cookies"       : {
    #     #     "session"   : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    #     # },
    #     # apikey请在ops个人设置页面进行设置
    #     "api_key"        : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    #     # authkey和torrent_pass请随便复制一个种子的下载链接，里面有
    #     "authkey"       : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    #     "torrent_pass"  : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    #     # filter_config的填写请参考上面的模板FILTER_CONFIG_TEMPLATE和给出的样例
    #     "filter_config" : {
    #         "name"    : "opsfilter",
    #         "banlist" : None,
    #         "media"   : None,
    #         "format"  : set(["FLAC"]),
    #         "sizelim" : (100 * MB, 1 * GB),
    #     },
    #     # 体积在这个区间内时自动使用token
    #     "token_thresh": (100 * MB, 2 * GB),
    #     # 自动ban人脚本条件，如果需要使用该脚本，请取消以下的注释：
    #     # 填写时，请参考上面的模板AUTOBAN_TEMPLATE和给出的样例
    #     # "autoban" : {
    #     #     "ratio" : [
    #     #         {"count":1, "ratiolim":0.2},
    #     #     ],        
    #     #     "ignore": {
    #     #         "min_progress" : 0.3,
    #     #         "max_time_added" : 36 * HOUR,
    #     #     },
    #     # },
    # },
    # ========================分割线3=============================
    # deluge客户端的登陆信息，如果不需要自动ban人脚本可以不填
    "deluge" : {
        "ip": "127.0.0.1",
         #这个端口是deluge api的端口，而不是deluge暴露在外网监听bt连接的端口，在webui上点"connect manager"在host一栏上会显示这个端口
        "port": 12345,
        "username": "xxxxxxxxxxxxxx",
        "password": "xxxxxxxxxxxxxx",
    },
    # requests发送请求的超时时间，不知道是啥的可以不改，单位：秒
    "requests_timeout" : 10,
}